extern crate terraria_protocol;
use terraria_protocol::types;
use terraria_protocol::types::TerrariaPacket;

#[test]
fn test_disconnect_deserialize() {
    const PKT: [u8; 4] = [0x03, 0x62, 0x79, 0x65];
    assert_eq!(
        types::Disconnect::deserialize(&PKT),
        types::Disconnect { reason: "bye".to_owned() }
    )
}

#[test]
fn test_continue_connecting_deserialize() {
    const PKT: [u8; 1] = [14u8];
    assert_eq!(
        types::ContinueConnecting::deserialize(&PKT),
        types::ContinueConnecting { player_id: 14 }
    )
}

#[test]
fn test_player_info_deserialize() {
    const PKT: [u8; 33] = [
        0x00,
        0x00,
        0x00,
        0x03,
        0x61,
        0x62,
        0x63,
        0x00,
        0x08,
        0x00,
        0x00,
        0x40,
        0x18,
        0x0d,
        0xff,
        0xbe,
        0xac,
        0xf2,
        0x8b,
        0x00,
        0x26,
        0x26,
        0x26,
        0x17,
        0x22,
        0x36,
        0x26,
        0x26,
        0x26,
        0x27,
        0x27,
        0x27,
        0x00,
    ];
    assert_eq!(
        types::PlayerInfo::deserialize(&PKT),
        types::PlayerInfo {
            player_id: 0,
            skin_varient: 0,
            hair: 0,
            name: "abc".to_owned(),
            hair_dye: 0,
            hide_visuals: 8,
            hide_visuals_2: 0,
            hide_misc: 0,
            hair_color: types::Color {
                r: 0x40,
                g: 0x18,
                b: 0x0d,
            },
            skin_color: types::Color {
                r: 0xff,
                g: 0xbe,
                b: 0xac,
            },
            eye_color: types::Color {
                r: 0xf2,
                g: 0x8b,
                b: 0x00,
            },
            shirt_color: types::Color {
                r: 0x26,
                g: 0x26,
                b: 0x26,
            },
            under_shirt_color: types::Color {
                r: 0x17,
                g: 0x22,
                b: 0x36,
            },
            pants_color: types::Color {
                r: 0x26,
                g: 0x26,
                b: 0x26,
            },
            shoe_color: types::Color {
                r: 0x27,
                g: 0x27,
                b: 0x27,
            },
            difficulty: 0,
        }
    )
}

#[test]
fn test_player_inentory_slot_deserialize() {
    const PKT: [u8; 7] = [0x05, 0x01, 0x0a, 0x00, 0x00, 0x32, 0x00];
    assert_eq!(
        types::PlayerInventorySlot::deserialize(&PKT),
        types::PlayerInventorySlot {
            player_id: 5,
            slot_id: 1,
            stack: 10,
            prefix: 0,
            item_netid: 0x32,
        }
    )
}

#[test]
fn test_world_info_deserialize() {
    const PKT: [u8; 125] = [
        0xcc,
        0x5b,
        0x00,
        0x00,
        0x01,
        0x07,
        0x00,
        0x19,
        0x08,
        0x07,
        0x80,
        0x0c,
        0xb0,
        0x01,
        0xdd,
        0x01,
        0x91,
        0x02,
        0x11,
        0x8b,
        0xde,
        0x60,
        0x07,
        0x57,
        0x6f,
        0x72,
        0x6c,
        0x64,
        0x20,
        0x31,
        0x65,
        0x4d,
        0x17,
        0xe3,
        0xbb,
        0x1a,
        0xed,
        0x4d,
        0x9f,
        0x66,
        0x74,
        0xad,
        0xb0,
        0x76,
        0x71,
        0xec,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x02,
        0x01,
        0x01,
        0x01,
        0x04,
        0x01,
        0x02,
        0x00,
        0x02,
        0x01,
        0x00,
        0x02,
        0x23,
        0x18,
        0x15,
        0xbe,
        0x08,
        0x87,
        0x05,
        0x00,
        0x00,
        0xf0,
        0x0b,
        0x00,
        0x00,
        0x00,
        0x19,
        0x00,
        0x00,
        0x05,
        0x02,
        0x03,
        0x00,
        0x44,
        0x08,
        0x00,
        0x00,
        0xc2,
        0x0f,
        0x00,
        0x00,
        0x00,
        0x19,
        0x00,
        0x00,
        0x00,
        0x01,
        0x02,
        0x03,
        0xeb,
        0x51,
        0x38,
        0x3e,
        0xbf,
        0x0f,
        0xd8,
        0x77,
        0xef,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x0d,
        0x98,
        0x9a,
        0x3f,
    ];

    assert_eq!(
        types::WorldInfo::deserialize(&PKT),
        types::WorldInfo {
            time: 23500,
            day_moon_info: 1,
            moon_phase: 7,
            max_tiles_x: 6400,
            max_tiles_y: 1800,
            spawn_x: 3200,
            spawn_y: 432,
            world_surface: 477,
            rock_layer: 657,
            world_id: 1625197329,
            world_name: "World 1".to_owned(),
            world_unique_id: vec![
                101,
                77,
                23,
                227,
                187,
                26,
                237,
                77,
                159,
                102,
                116,
                173,
                176,
                118,
                113,
                236,
            ],
            moon_type: 0,
            tree_background: 0,
            corrption_background: 0,
            jungle_background: 0,
            snow_background: 0,
            hallow_background: 0,
            crimson_background: 0,
            desert_background: 0,
            ocean_background: 2,
            ice_back_style: 1,
            jungle_back_style: 1,
            hell_back_style: 1,
            wind_speed_set: 0.000000000000000000000000000000000000000184035,
            cloud_number: 2,
            tree_1: 587333633,
            tree_2: 146674968,
            tree_3: 1415,
            tree_style_1: 240,
            tree_style_2: 11,
            tree_style_3: 0,
            tree_style_4: 0,
            cave_back_1: 6400,
            cave_back_2: 197125,
            cave_back_3: 2116,
            cave_back_style_1: 194,
            cave_back_style_2: 15,
            cave_back_style_3: 0,
            cave_back_style_4: 0,
            rain: 0.000000000000000000000000000000000000000008968,
            event_info_1: 0,
            event_info_2: 1,
            event_info_3: 2,
            event_info_4: 3,
            event_info_5: 235,
            invasion_type: 81,
            lobby_id: 67404289294679608,
            sandstorm_severity: 0.0,
        }
    )
}
